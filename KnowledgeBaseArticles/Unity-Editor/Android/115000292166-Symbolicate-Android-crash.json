[{"title":"Symbolicate Android crash","authorName":"Alejandro Lopez.","createdDate":"2017-01-11T17:32:31Z","updatedDate":"2017-10-18T05:30:41Z","labels":["Android","crash","symbolicate"],"sections":[{"title":"Symptoms","content":["\n<li>You get an Android crash log from your users.&#xA0;</li>\n<li>You can&#x2019;t understand the call stack as it only reports memory addresses.</li>\n"]},{"title":"When you build in release mode, the symbols are not packed with the APK. If your app crashed, the call stack will only show the memory address. Resolution","content":["From Unity 5.3.5p2 and 5.4.0, the Android symbols are stored in your Unity installation folder.","You can find the Android symbols here:","\n<li>For<strong> MacOS:</strong>&#xA0;</li>\n","<em>/Applications/Unity/PlaybackEngines/AndroidPlayer/Variations/mono/Release/Symbols</em>","\n<li>For<strong> Windows:</strong>&#xA0;</li>\n","<em>C:\\Program Files\\Unity\\Editor\\Data\\PlaybackEngines\\AndroidPlayer\\Variations\\mono\\Release\\Symbols\\armeabi-v7a\\libunity.sym.so</em>","You can use addr2line tool and the symbols file to convert the memory addresses into function names and create a call stack.","For example, let&apos;s say you have the following crash log:&#xA0;","05-26 18:06:51.311: A/libc(26986): Fatal signal 11 (SIGSEGV) at 0x000004e4 (code=1), thread 27024 (Worker Thread)\n05-26 18:06:51.411: I/DEBUG(242): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n05-26 18:06:51.411: I/DEBUG(242): Build fingerprint: &apos;Xiaomi/cancro_wc_lte/cancro:4.4.4/KTU84P/V6.7.1.0.KXDCNCH:user/release-keys&apos;\n05-26 18:06:51.411: I/DEBUG(242): Revision: &apos;0&apos;\n05-26 18:06:51.411: I/DEBUG(242): pid: 26986, tid: 27024, name: Worker Thread  &gt;&gt;&gt; com.u.demo &lt;&lt;&lt;\n05-26 18:06:51.411: I/DEBUG(242): signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 000004e4\n\n I/DEBUG(242): backtrace:\n I/DEBUG(242):     #00  pc 006d4960  /data/app-lib/com.u.demo-1/libunity.so\n I/DEBUG(242):     #01  pc 006d4c0c  /data/app-lib/com.u.demo-1/libunity.so\n I/DEBUG(242):     #02  pc 006d4c0c  /data/app-lib/com.u.demo-1/libunity.so\n I/DEBUG(242):     #03  pc 006d4c0c  /data/app-lib/com.u.demo-1/libunity.so\n I/DEBUG(242):     #04  pc 006d4c0c  /data/app-lib/com.u.demo-1/libunity.so\n I/DEBUG(242):     #05  pc 001c5510  /data/app-lib/com.u.demo-1/libunity.so\n I/DEBUG(242):     #06  pc 001c595c  /data/app-lib/com.u.demo-1/libunity.so\n I/DEBUG(242):     #07  pc 001c4ec0  /data/app-lib/com.u.demo-1/libunity.so\n I/DEBUG(242):     #08  pc 0043a05c  /data/app-lib/com.u.demo-1/libunity.so\n I/DEBUG(242):     #09  pc 0000d248  /system/lib/libc.so (__thread_entry+72)\n I/DEBUG(242):     #10  pc 0000d3e0  /system/lib/libc.so (pthread_create+240)\n","In the above call stack, the bold numbers (such as <strong>006d4960</strong>) are the memory addresses of the functions that were executing when the crash happened, and at the end of the line is the library used (<strong>libunity.so</strong> in this instance).","You can get the symbol from each memory addresses by executing the addr2line tool on each memory address:","&gt; ./arm-linux-androideabi-addr2line -f -C -e   /Applications/Unity.app/Content/PlaybackEngines/AndroidPlayer/Variations/mono/Release/Symbols/armeabi-v7a/libunity.sym.so 0043a05c\n","\n<li><strong>-f</strong> - Show function names&#xA0;</li>\n<li><strong>-C</strong> - Demangle function names&#xA0;</li>\n<li><strong>-e</strong> - Set the input file name</li>\n","After you execute the command with each memory address, you will get the proper call stack when the app crashed:","I/DEBUG(242): backtrace:\n I/DEBUG(242):  #00 AnimationPlayable::PrepareAnimationEvents(float, dynamic_array&lt;AnimationClipEventInfo, 4u&gt;&amp;)\n I/DEBUG(242):  #01  AnimationPlayable::PrepareAnimationEvents(float, dynamic_array&lt;AnimationClipEventInfo, 4u&gt;&amp;)\n I/DEBUG(242):  #02  AnimationPlayable::PrepareAnimationEvents(float, dynamic_array&lt;AnimationClipEventInfo, 4u&gt;&amp;)\n I/DEBUG(242):  #03  AnimationPlayable::PrepareAnimationEvents(float, dynamic_array&lt;AnimationClipEventInfo, 4u&gt;&amp;)\n I/DEBUG(242):  #04 AnimationPlayable::PrepareAnimationEvents(float, dynamic_array&lt;AnimationClipEventInfo, 4u&gt;&amp;)\n I/DEBUG(242):  #05  JobQueue::ExecuteJobFunc(JobInfo*)\n I/DEBUG(242):  #06  JobQueue::ExecuteJobFromHighPriorityStack()\n I/DEBUG(242):  #07  JobQueue::WorkLoop(void*)\n I/DEBUG(242):  #08  Thread::RunThreadWrapper(void*)  18:06:51.501: I/DEBUG(242):     #09  pc 0000d248  /system/lib/libc.so (__thread_entry+72)\n I/DEBUG(242):     #10  pc 0000d3e0  /system/lib/libc.so (pthread_create+240)\n","In this case, we can read the call stack properly and detect that the crash happened due to animation events. This information is useful for a number of purposes, including:","\n<li>Creating a bug report.</li>\n<li>Reviewing patch releases for a possible fix.</li>\n<li>Reviewing the code for a possible issue.</li>\n","You can find the addr2line tool in your Android NDK at the following address:","<em>/android-ndk_auto-r10e/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-addr2line</em>","<span class=\"wysiwyg-color-red\"><strong>Note:</strong> Always use the symbols from the same version of the Editor from which you built the APK, otherwise you will get wrong values.</span>"]},{"title":"More Information","content":["For more information, consult the following documentation:","\n<li><a href=\"https://bitbucket.org/davehampson/symbolicate\">How to use the symbolicate function</a></li>\n<li><a href=\"https://developer.android.com/ndk/index.html\">Android NDK homepage&#xA0;</a></li>\n<li><a href=\"https://issuetracker.unity3d.com\">Unity Issue Tracker&#xA0;</a></li>\n<li><a href=\"https://unity3d.com/unity/qa/patch-releases\">Unity patch releases homepage&#xA0;</a></li>\n<li><a href=\"https://docs.unity3d.com/Manual/TroubleShootingAndroid.html\">Troubleshooting Android documentation</a></li>\n"]}]}]