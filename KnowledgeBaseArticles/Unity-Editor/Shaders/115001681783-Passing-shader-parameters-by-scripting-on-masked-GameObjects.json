[{"title":"Passing shader parameters by scripting on masked GameObjects","authorName":"Juan Diego Uran.","createdDate":"2017-04-04T13:47:47Z","updatedDate":"2017-07-27T15:20:59Z","labels":["Shaders","UI","Graphics","Shader","Materials","Masking"],"sections":[{"title":"Symptoms","content":["\n<li><span>The shader behaves as expected in most cases, but when used with a </span><strong>masked UI component</strong><span>, the values from </span><strong>SetColorArray/SetColor/Set*</strong><span> are not being passed through to the shader.</span></li>\n","\n<li><span>The shader seems to be ignoring my custom parameters sent by scripting when </span><strong>Masked</strong><span>.</span></li>\n"]},{"title":"Cause","content":["<span>Masks use a method called </span><strong>GetModifiedMaterial</strong><span> to calculate which pixels are masked using the Stencil buffer. It ignores all custom parameters sent by your scripts as it applies the custom shader by scripting using defaults. &#xA0;When you set the parameters using the setter functions (as </span><strong>SetColorArray</strong><span>) they will be set momentarily. Before rendering pixels on the screen however, the Mask component will call the method </span><strong>GetModifiedMaterial</strong><span> on each masked object and will use the default settings in your material. It will ignore your custom settings.</span>"]},{"title":"Resolution","content":["<span>To solve this problem, you have to extend the Image class (</span><strong>UI.Image </strong><span>or </span><strong>UI.RawImage</strong><span>) and override the method </span><strong>GetModifiedMaterial</strong><span>. &#xA0;By doing this you can apply the mask first, to view which pixels are visible, and then send the custom values to the shader. &#xA0;</span><span>For example, to create a menu button with highlight effect (which has our custom shader) masked by a frame, follow these steps</span>","\n<li><span>Create a frame (Canvas) and put your buttons inside.</span></li>\n<li><span>Create a shader which accepts custom parameters as the Highlight color</span></li>\n","<span>Shader &quot;Test/CustomShader&quot;</span>","<span>{</span>","<span> &#xA0;&#xA0;&#xA0;Properties</span>","<span> &#xA0;&#xA0;&#xA0;{</span>","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;_Color (&quot;Color&quot;, Color) = (1,1,1,1)</span>","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;_MainTex (&quot;Albedo (RGB)&quot;, 2D) = &quot;white&quot; {}</span>","<span> &#xA0;&#xA0;&#xA0;}</span>","&#xA0;","<span> &#xA0;&#xA0;&#xA0;SubShader</span>","<span> &#xA0;&#xA0;&#xA0;{</span>","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Tags { &quot;RenderType&quot;=&quot;Opaque&quot; }</span>","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;LOD 150</span>","&#xA0;","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CGPROGRAM</span>","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;#pragma surface surf Lambert</span>","&#xA0;","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sampler2D _MainTex;</span>","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;fixed4 _Color;</span>","&#xA0;","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;struct Input</span>","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{</span>","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;float2 uv_MainTex;</span>","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;};</span>","&#xA0;","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;void surf (Input IN, inout SurfaceOutput o)</span>","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{</span>","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;half4 tmpTexColor = tex2D (_MainTex, IN.uv_MainTex);</span>","&#xA0;","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// Albedo comes from a texture tinted by color</span>","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;half4 color = tmpTexColor * _Color;</span>","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;o.Albedo = color.rgb;</span>","<span> &#xA0;&#xA0;&#xA0;</span>","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;o.Alpha = color.a;</span>","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}</span>","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ENDCG</span>","<span> &#xA0;&#xA0;&#xA0;}</span>","<span> &#xA0;&#xA0;&#xA0;FallBack &quot;Mobile/Diffuse&quot;</span>","<span>}</span>","\n<li><span>Create a new Material called &#x201C;CustomMaterial&#x201D; which uses the Shader created above. </span></li>\n<li><span>Attach the Material to the Button component. </span><strong>bMaterial </strong><span>will load our shader later in our script.</span></li>\n<li><span>Attach a Mask component to the frame container.</span></li>\n<li><span>Create a script (</span><strong>CustomRawImage.cs)</strong><span> with the following code:</span></li>\n","<span>using</span><span> UnityEngine;</span>","<span>using</span><span> System.Collections;</span>","<span>using</span><span> UnityEngine.UI;</span>","<span>public</span> <span>class</span> <span>CustomRawImage</span><span> : </span><span>RawImage</span>","<span>{</span>","<span> &#xA0;&#xA0;&#xA0;</span><span>public</span> <span>override</span> <span>Material</span><span> GetModifiedMaterial(</span><span>Material</span><span> bMaterial)</span>","<span> &#xA0;&#xA0;&#xA0;{</span>","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><em><span>// Apply the mask.</span></em>","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span>Material</span><span> tmp = </span><span>base</span><span>.GetModifiedMaterial (bMaterial);</span>","&#xA0;","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><em><span>// Pass your custom shader parameters.</span></em>","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;tmp.</span><span>SetColor(&quot;_CustomColor&quot;,</span><a href=\"https://docs.unity3d.com/ScriptReference/Color-red.html\"> <span>Color.red</span></a><span>);</span>","&#xA0;","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><em><span>// return the material with Mask + Customs applied.</span></em>","<span> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span>return</span><span> tmp;</span>","<span> &#xA0;&#xA0;&#xA0;}</span>","<span>}</span><span><br><br></span>","\n<li><span> Replace the </span><strong>Image/RawImage</strong><span> component on all your buttons with this </span><strong>CustomRawimage</strong><span> script component.</span></li>\n","<span>The property</span><strong> bMaterial</strong><span> is the material attached to each button. As it is your highlight shader effect, you can replace It by another different material if needed.</span>"]},{"title":"More Information","content":["\n<li><a href=\"https://docs.unity3d.com/Manual/MaterialsAccessingViaScript.html\"><span>https://docs.unity3d.com/Manual/MaterialsAccessingViaScript.html</span></a></li>\n<li><a href=\"https://docs.unity3d.com/ScriptReference/Material.html\"><span>https://docs.unity3d.com/ScriptReference/Material.html</span></a></li>\n"]}]}]