[{"title":"Adding torque to a Rigidbody does not add it to its coordinate system","authorName":"Esteban.","createdDate":"2015-12-17T14:05:27Z","updatedDate":"2016-12-22T06:10:37Z","labels":["Rigidbody","Physics","Rotation","torque","刚体","物理","旋转","扭矩"],"sections":[{"title":"Symptoms","content":["\n<li>I want to add torque to a Rigidbody that has a complex shape (different that simply a box primitive, or&#xA0;a Rigidbody that has its&#xA0;center of gravity perfectly aligned along one of the body&apos;s local x,y,z axis.) and use AddRelativeTorque, but the Rigidbody is sent spinning around another unexpected axis.&#xA0;</li>\n"]},{"title":"Cause","content":["AddRelativeTorque adds torque according to its Inertia Tensors. Therefore, the desired angular velocity must be transformed according to the Inertia Tensor, to get the required Torque."]},{"title":"Resolution","content":["If you want to spin the object at a specific angular velocity, and you want it to rotate through the principal axes then you can use a code like this:","// Rotate about Y principal axis<br>Vector3 desiredAngularVelInY = new Vector3(0, Mathf.PI, 0); // &#xA0;1/2 revs per second <br>Vector3 torque =&#xA0;rigidbodyCached.inertiaTensorRotation * Vector3.Scale(rigidbodyCached.inertiaTensor, desiredAngularVelInY);<br>rigidbody.AddRelativeTorque(torque, ForceMode.Impulse);<br><br>","Please note that this solution only works for single Rigidbodies, including GameObjects having multiple colliders in the same GameObject. It does not work for multiple Rigidbodies connected with Joints.&#xA0;"]},{"title":"More Information","content":["For more information see this <a href=\"http://answers.unity3d.com/questions/48836/determining-the-torque-needed-to-rotate-an-object.html\" target=\"_blank\">Answers post</a>.","This article applies to Unity versions 5.x","&#xA0;"]}]}]