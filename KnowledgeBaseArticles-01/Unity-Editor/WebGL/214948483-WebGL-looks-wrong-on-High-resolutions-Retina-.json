[{"title":"WebGL looks wrong on High resolutions (Retina)","authorName":"Juan Diego Uran.","createdDate":"2016-10-06T12:20:20Z","updatedDate":"2017-03-17T02:46:25Z","labels":["WebGL","Retina","HD","High","Resolution"],"sections":[{"title":"Symptoms","content":["\n<li><span>The app content does not appear as I want on Retina display devices when I use the WebGL build.</span></li>\n<li><span>The Canvas content appears pixelated in WebGL.</span></li>\n<li><span>The Canvas content looks weird (stretched or squashed).</span></li>\n"]},{"title":"Cause","content":["<span>The browser will increase the size of the Canvas automatically, but its content will keep its size, showing some anti-aliasing errors.</span>"]},{"title":"Resolution","content":["<span>A Canvas element in HTML has two different sizes properties and we should use them to adapt our content to High Resolution Screens (Retina included).</span>","\n<li><span> The Canvas size is the size the Canvas element will be displayed on your screen (on the page), and we can change this value using CSS attributes width &amp; height:</span></li>\n","<strong><em>&lt;canvas id=&quot;CanvasTest&quot; style=&quot;width: 400px; height: 300px;&quot; ...&gt;&lt;/canvas&gt;</em></strong>","\n<li><span> The Canvas Contents size is how many pixels are in the Canvas, and we can modify this value&#xA0; changing the Canvas attributes width and height (in pixels). &#xA0;This size is called </span><strong>drawingBuffer</strong><span>.</span></li>\n","<strong><em>&lt;canvas id=&quot;CanvasTest&quot; width=&quot;100&quot; height=&quot;150&quot; ...&gt;&lt;/canvas&gt;</em></strong>","<span>If you do not use the CSS properties to set the Canvas Size, the Canvas size will take the </span><strong>drawingBuffer</strong><span> size, so in the second example, the Canvas Content size is set to 100x150 (px), and the Canvas size will be set to 100x150 (px) as well.</span>","<em><strong>Setting the Canvas size and fixing the Canvas Content size</strong></em>","<span>We can use these properties to set our content as needed, for example, we can change the Canvas size to fill all browser size using this:</span>","<em><span>&lt;style&gt;</span></em>","<em><span>body</span></em>","<em><span>{</span></em>","<em><span> &#xA0;&#xA0;&#xA0;margin: 0;</span></em>","<em><span> &#xA0;&#xA0;&#xA0;border: 0;</span></em>","<em><span> &#xA0;&#xA0;&#xA0;padding: 0;</span></em>","<em><span> &#xA0;&#xA0;&#xA0;background-color: white; // It depends of your project.</span></em>","<em><span>}</span></em>","<em><span>canvas</span></em>","<em><span>{</span></em>","<em><span> &#xA0;&#xA0;&#xA0;width: 100%;</span></em>","<em><span> &#xA0;&#xA0;&#xA0;height: 100%;</span></em>","<em><span> &#xA0;&#xA0;&#xA0;position: absolute;</span></em>","<em><span>}</span></em>","<em><span>&lt;/style&gt;</span></em><br><br>","<span>We can set the app to full-screen using this code in a callback triggered by some Input event in C# code</span>","<strong><em>void OnClickEvent ()</em></strong>","<strong><em>{</em></strong>","<strong><em>&#xA0;&#xA0;&#xA0; </em></strong><strong><em>Screen.fullScreen = true;</em></strong>","<strong><em>}</em></strong>","<span>Please check these links to get more details of this: </span>","\n<li><span>https://docs.unity3d.com/Manual/webgl-cursorfullscreen.html</span></li>\n<li><span>https://docs.unity3d.com/ScriptReference/Screen-fullScreen.html</span></li>\n","<span>To make the Canvas Content size match with the Canvas size, we use the properties clientWidth and clientHeight and assign the width &amp; height Canvas properties like this:</span>","<strong><em>canvas.width = canvas.clientWidth;</em></strong>","<strong><em>canvas.height = canvas.clientHeight;</em></strong>","<span>We can use this snippet in a resize callback in JS.</span>","<em><strong>Handling the DPI property on Retina displays.</strong></em>","<span>Finally, we have some cases where our app should run on Retina display devices such as the Macbook Pro with Retina display or mobile devices with Retina display. &#xA0;On these cases, we have to manage the High Pixel Densities (DPI). &#xA0;Unity does not have an internal option or setting to set this property, but we can fix it using JS.</span>","<span>The browser will increase the size of the Canvas automatically, but its content will keep its size giving us some anti-aliasing errors. To fix that, we can use the property devicePixelRatio (window.devicePixelRatio) to know how many real pixels that fill 1 CSS pixel and change our resize callback function to something like:</span>","<strong><em>canvas.width = canvas.clientWidth * window.devicePixelRatio;</em></strong>","<strong><em>canvas.height = canvas.clientHeight * window.devicePixelRatio;</em></strong>","<span>With these two lines, the content will match with our high-resolution device (even Retina) and your content will look as intended.</span>"]},{"title":"More Information","content":["<span>https://docs.unity3d.com/Manual/webgl-cursorfullscreen.html</span><br><span>https://docs.unity3d.com/ScriptReference/Screen-fullScreen.html</span>"]}]}]