[{"title":"How to modify the Editor Application Layout from a script","authorName":"Jordi Bonastre.","createdDate":"2016-04-05T13:14:30Z","updatedDate":"2016-12-21T10:05:12Z","labels":["Scripting","Editor","Layout","Reflection"],"sections":[{"title":"Symptoms","content":["\n<li>Editor Application does not offer a public API to modify the Editor Layout.</li>\n"]},{"title":"Cause","content":["The public API does not offer any method for changing the Editor Layout, however using Reflection it is possible to save and load layouts using the UnityEditor namespace."]},{"title":"Resolution","content":["UnityEditor.WindowLayout has two methods useful for saving and loading an Editor layout: <em>SaveWindowLayout</em> and <em>LoadWindowLayout</em>.&#xA0;","\n<pre><span>using</span> <span>UnityEditor</span>;\n<span>using</span> <span>System.IO</span>;\n<span>using</span> <span>System.Reflection</span>;\n<span>using</span> <span>Type</span> = System.Type;\n\n<span>public</span> <span>static</span> <span>class</span> <span>LayoutUtility</span> {\n\n\t<span>private</span> <span>static</span> MethodInfo _miLoadWindowLayout;\n\t<span>private</span> <span>static</span> MethodInfo _miSaveWindowLayout;\n\t<span>private</span> <span>static</span> MethodInfo _miReloadWindowLayoutMenu;\n\t<span>private</span> <span>static</span> <span>bool</span> _available;\n\t<span>private</span> <span>static</span> <span>string</span> _layoutsPath;\n\n\t<span>static</span> <span>LayoutUtility</span>() {\n\t\tType tyWindowLayout = Type.GetType(<span>&quot;UnityEditor.WindowLayout,UnityEditor&quot;</span>);\n\t\tType tyEditorUtility = Type.GetType(<span>&quot;UnityEditor.EditorUtility,UnityEditor&quot;</span>);\n\t\tType tyInternalEditorUtility = Type.GetType(<span>&quot;UnityEditorInternal.InternalEditorUtility,UnityEditor&quot;</span>);\n\t\t<span>if</span> (tyWindowLayout != <span>null</span> &amp;&amp; tyEditorUtility != <span>null</span> &amp;&amp; tyInternalEditorUtility != <span>null</span>) {\n\t\t\tMethodInfo miGetLayoutsPath = tyWindowLayout.GetMethod(<span>&quot;GetLayoutsPath&quot;</span>, BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Static);\n\t\t\t_miLoadWindowLayout = tyWindowLayout.GetMethod(<span>&quot;LoadWindowLayout&quot;</span>, BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Static, <span>null</span>, <span>new</span> Type[] { <span>typeof</span>(<span>string</span>), <span>typeof</span>(<span>bool</span>) }, <span>null</span>);\n\t\t\t_miSaveWindowLayout = tyWindowLayout.GetMethod(<span>&quot;SaveWindowLayout&quot;</span>, BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Static, <span>null</span>, <span>new</span> Type[] { <span>typeof</span>(<span>string</span>) }, <span>null</span>);\n\t\t\t_miReloadWindowLayoutMenu = tyInternalEditorUtility.GetMethod(<span>&quot;ReloadWindowLayoutMenu&quot;</span>, BindingFlags.Public | BindingFlags.Static);\n\n\t\t\t<span>if</span> (miGetLayoutsPath == <span>null</span> || _miLoadWindowLayout == <span>null</span> || _miSaveWindowLayout == <span>null</span> || _miReloadWindowLayoutMenu == <span>null</span>)\n\t\t\t\t<span>return</span>;\n\n\t\t\t_layoutsPath = (<span>string</span>)miGetLayoutsPath.Invoke(<span>null</span>, <span>null</span>);\n\t\t\t<span>if</span> (<span>string</span>.IsNullOrEmpty(_layoutsPath))\n\t\t\t\t<span>return</span>;\n\n\t\t\t_available = <span>true</span>;\n\t\t}\n\t}\n\n\t<span>// Gets a value indicating whether all required Unity API functionality is available for usage.</span>\n\t<span>public</span> <span>static</span> <span>bool</span> IsAvailable {\n\t\t<span>get</span> { <span>return</span> _available; }\n\t}\n\n\t<span>// Gets absolute path of layouts directory. Returns `null` when not available.</span>\n\t<span>public</span> <span>static</span> <span>string</span> LayoutsPath {\n\t\t<span>get</span> { <span>return</span> _layoutsPath; }\n\t}\n\n\t<span>// Save current window layout to asset file. `assetPath` must be relative to project directory.</span>\n\t<span>public</span> <span>static</span> <span>void</span> <span>SaveLayoutToAsset</span>(<span>string</span> assetPath) {\n\t\tSaveLayout(Path.Combine(Directory.GetCurrentDirectory(), assetPath));\n\t}\n\n\t<span>// Load window layout from asset file. `assetPath` must be relative to project directory.</span>\n\t<span>public</span> <span>static</span> <span>void</span> <span>LoadLayoutFromAsset</span>(<span>string</span> assetPath) {\n\t\t<span>if</span> (_miLoadWindowLayout != <span>null</span>) {\n\t\t\t<span>string</span> path = Path.Combine(Directory.GetCurrentDirectory(), assetPath);\n\t\t\t_miLoadWindowLayout.Invoke(<span>null</span>, <span>new</span> <span>object</span>[] { path , <span>true</span> });\n\t\t}\n\t}\n\n\t<span>// Save current window layout to file. `path` must be absolute.</span>\n\t<span>public</span> <span>static</span> <span>void</span> <span>SaveLayout</span>(<span>string</span> path) {\n\t\t<span>if</span> (_miSaveWindowLayout != <span>null</span>)\n\t\t\t_miSaveWindowLayout.Invoke(<span>null</span>, <span>new</span> <span>object</span>[] { path });\n\t}\n}\n</pre>\n"]},{"title":"More InformationÂ ","content":["<a href=\"http://answers.unity3d.com/questions/382973/programmatically-change-editor-layout.html\" target=\"_blank\">http://answers.unity3d.com/questions/382973/programmatically-change-editor-layout.html</a>","<a href=\"https://github.com/MattRix/UnityDecompiled/blob/master/UnityEditor/UnityEditor/WindowLayout.cs\" target=\"_blank\">https://github.com/MattRix/UnityDecompiled/blob/master/UnityEditor/UnityEditor/WindowLayout.cs</a>","This article applies to Unity version 5.3"]}]}]